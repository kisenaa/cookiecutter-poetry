[project]
name = "{{cookiecutter.project_slug}}"
version = "0.0.1"
description = "{{cookiecutter.project_description}}"
authors = [{ name = "{{cookiecutter.author}}", email = "{{cookiecutter.email}}" }]
readme = "README.md"
requires-python = ">=3.11,<4.0"
dependencies = [
]

[project.urls]
Repository = "https://github.com/{{cookiecutter.author_github_handle}}/{{cookiecutter.project_name}}"
Documentation = "https://{{cookiecutter.author_github_handle}}.github.io/{{cookiecutter.project_name}}/"
Homepage = "https://{{cookiecutter.author_github_handle}}.github.io/"

[tool.poetry]
{% if cookiecutter.layout == "src" -%}
packages = [{include = "{{cookiecutter.project_slug}}", from = "src"}]
{% else %}
packages = [{include = "{{cookiecutter.project_slug}}"}]
{% endif %}

[tool.poetry.dependencies]
python = ">=3.11,<4.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
{% if cookiecutter.codecov == 'y' -%}
pytest-cov = "^4.0.0"
{% endif -%}
{% if cookiecutter.deptry == 'y' -%}
deptry = "^0.16.2"
{% endif -%}
{% if cookiecutter.typechecking == 'mypy' -%}
mypy = "^1.5.1"
{% endif -%}
{% if cookiecutter.typechecking == 'pyright' -%}
pyright = "^1.1.382"
{% endif -%}
pre-commit = "^3.4.0"
tox = "^4.11.1"

{% if cookiecutter.mkdocs == 'y' -%}
[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocs-material = "^9.2.7"
mkdocstrings = {extras = ["python"], version = "^0.26.1"}
{%- endif %}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

{% if cookiecutter.typechecking == 'mypy' -%}
[tool.mypy]
files = [
    {%- if cookiecutter.layout == "src" -%}
    "src"
    {%- else -%}
    "{{cookiecutter.project_slug}}"
    {%- endif -%}
]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true
{%- endif %}

{% if cookiecutter.typechecking == 'pyright' -%}
[tool.pyright]
include = ["{{cookiecutter.project_slug}}"]
typeCheckingMode = "strict"
venvPath = "."
venv = ".venv"
{%- endif %}

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py311"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
]

[tool.ruff.format]
preview = true

{% if cookiecutter.codecov == "y"-%}
[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = [
    {%- if cookiecutter.layout == "src" -%}
    "src"
    {%- else -%}
    "{{cookiecutter.project_slug}}"
    {%- endif -%}
]
{% endif%}

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
